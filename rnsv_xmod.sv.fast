//.from rns import rns
//.from rnsv_xmod_base import rnsv_xmod_base
//.class rnsv_xmod(rnsv_xmod_base):{
//.def __init__(self, name, m, rnsv_base, parent=None, do_declaration=True):{
//. super().__init__(name, m, rnsv_base, parent, do_declaration)
//. if parent is None and do_declaration:{
//.  +self.rnsv_base.declarations
logic [@m-1@:0] @name@;
//.  -self.rnsv_base.declarations
//. }
//.}
//.def map2comb(self, fct, op, x=None):{
//. m = self.m
//. if self.parent:{
//.  n = f"{self.parent.n}.x{m}"
//.  print(n)
//. }
//. else:{
//.  n = self.rnsv_base.gen_var_name()
//.  +self.rnsv_base.comb
//-----------------------------------------------------------------
//.  if self.comb_comment:{
// @self.comb_comment@
//.   self.comb_comment = ''
//.  }
//.  if x is None:{
// xmod@m@: @op@()
//.  }
//.  else:{
// xmod@m@: @op@(@x@)
//.  }
//.  -self.rnsv_base.comb
//. } # end else
//. +self.rnsv_base.comb
//. if (op == 'mul') and (x % m == 0):{
assign @n@ = @m@'d1;
//. }
//. elif (op == 'nop'):{
assign @n@ = @m@'b0;
//. }
//. else:{
//.  r = super().op_map(fct)
assign @n@ = {@','.join(r)@};
//. }
//. -self.rnsv_base.comb
//. return self.create(n)
//.} # end def map2comb
//.def connect_inst(self, other, modname):{
//. if not self.parent:{
//.  n = self.rnsv_base.gen_var_name()
//.  if modname == "modadd":{
//.   modadd(self.m)
//.   op = '+'
//.  }
//.  if modname == "modmul":{
//.   modmul(self.m)
//.   op = '*'
//.  }
//.  +self.rnsv_base.includes
`include "@modname@_@self.m@.sv"
//.  -self.rnsv_base.includes
//.  +self.rnsv_base.instances
//.  instname = "inst_" + n
@modname@_@self.m@ @instname@(.z(@n@), .x(@self.name@), .y(@other.name@));
//.  -self.rnsv_base.instances
//.  +self.rnsv_base.comb
//-----------------------------------------------------------------
// xmod@self.m@: @self.name@ @op@ @other.name@ (see instance @instname@ above)
//.  -self.rnsv_base.comb
//.  return self.create(n)
//. } # end if
//.} # end def connect_inst
//.def __rshift__(self, other):{
//. if isinstance(other, int):{
//.  n = self.rnsv_base.gen_var_name()
//.  +self.rnsv_base.comb
//-----------------------------------------------------------------
// xmod@self.m@: mapping @self.name@ to @n@ (mod @other@)
assign @n@= @self.map_to_mod(other)@;
//.  -self.rnsv_base.comb
//.  return self.create(n, other)
//. }
//. if isinstance(other, type(self)):{
//.  return self >> other.m
//. }
//. if isinstance(other, rnsv_var):{
//.  return other << self
//. }
//. raise Exception(f"Type {type(other)} not supported")
//.} # end def __rshift__
//.} # end class
