///fast.include("xmodv.sv.fast")
///fast.include("rnsv_xmod.sv.fast")
///fast.include("rnsv_var.sv.fast")
///fast.include("rnsv_xmod_const.sv.fast")
///fast.include("rnsv_const.sv.fast")
///fast.include("structs.sv.fast")
///fast.include("rnsv_modadd.sv.fast")
///fast.include("rnsv_modmul.sv.fast")
//.+fast
//.class rnsv:{
//. def __init__(self, name, struct_name, base):{
//.  self.name = name ## unique name given to the instance used for sections
//.  self.struct_name = struct_name  ## SV struct name used for RNS
//.  self.base = base
//.  self.constants = {}
//.  self.xmod_constants = {}
//.  self.var_num = 0
//.  self.do_declaration = True
//.  ## Define sections
//.  self.includes = Section(f"{name}_includes")
//.  self.declarations = Section(f"{name}_declarations")
//.  self.instances = Section(f"{name}_instances")
//.  self.comb = Section(f"{name}_comb")
//.  self.sva = Section(f"{name}_sva")
//.  self.rnsv_modadd_called = False
//.  self.rnsv_modmul_called = False
//. }
//. def __str__(self):{
//.  return self.struct_name
//. }
//. def gen_var_name(self):{
//.  rv = f"_{self.struct_name}_{self.var_num}"
//.  self.var_num += 1
//.  return rv
//. }
//.# def xmod(self, name, m, parent=None, do_declaration=True):{
//. def xmod(self, name, m):{
//.  """
//.  Returns a new XMOD variable with mod m
//.  OR returns an xmod constant if name is type int instead of str
//.  """
//.  if isinstance(name, str):{
//.#   return rnsv_xmod(name, m, self, parent, do_declaration)
//.   return xmodv(name, m, self)
//.  }
//.  assert(isinstance(name, int))
//.  x = name
//.  if x not in self.xmod_constants:{
//.   self.xmod_constants[x] = rnsv_xmod_const(x, m, self)
//.  }
//.  return self.xmod_constants[x].name
//. }
//. def __getattr__(self, name):{
//.  """
//.  RNSV variables are attributes of rnsv class instance
//.  """
//.  rv = rnsv_var(name, self)
//.  setattr(self, name, rv)
//.  if self.do_declaration:{
//.   +self.declarations
@self.struct_name@ @name@;
//.   -self.declarations
//.#   rv.declared = True
//.  }
//.  self.do_declaration = True
//.  return rv
//. }
//. def __call__(self, x):{
//.  """
//.  RNSV constants are tracked by constants dict
//.  """
//.  if isinstance(x, str):{
//.   if x == 'no declaration':{
//.    self.do_declaration = False
//.   }
//.   return self
//.  }
//.  assert(isinstance(x, int))
//.  if x not in self.constants:{
//.   self.constants[x] = rnsv_const(x, self)
//.  }
//.  return self.constants[x].name
//. }
//.} # end class
//.-fast
