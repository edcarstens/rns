//.from rns import rns
//.from rnsv_var_base import rnsv_var_base
//.class rnsv_var(rnsv_var_base):{
//. def __init__(self, name, parent):{
//.  super().__init__(name, parent)
//.  self.xmods = [rnsv_xmod(f"{self.name}.x{m}", m, self.parent, self, False) for m in self.base]
//. }
//. def declare(self, name):{
//.  var = self.create(name)
//.  +self.parent.declarations
@self.parent.struct_name@ @name@;
//.  -self.parent.declarations
//.#  var.declared = True
//.  return var
//. }
//. def map2comb(self, op, x=None):{
//.  +self.parent.comb
//-----------------------------------------------------------------
//.  if self.comb_comment:{
// @self.comb_comment@
//.   self.comb_comment = ''
//.  }
//.  if x is None:{
// @op@()
//.  }
//.  else:{
// @op@(@x@)
//.  }
//.  -self.parent.comb
//.  self.n = self.parent.gen_var_name()
//.  return self.declare(self.n)
//. } # end def map2comb
//. def connect_inst(self, other, modname, start, stop, step):{
//.  n = self.parent.gen_var_name()
//.  instname = "inst_" + n
//.  if modname == "modadd":{
//.   op = '+'
//.   rnsv_modadd(self.parent)
//.  }
//.  if modname == "modmul":{
//.   op = '*'
//.   rnsv_modmul(self.parent)
//.  }
//.  +self.parent.instances
@self.parent.struct_name@_@modname@ @instname@(.z(@n@), .x(@self.name@), .y(@other.name@));
//.  -self.parent.instances
//.  +self.parent.comb
//-----------------------------------------------------------------
// @self.name@ @op@ @other.name@ (see instance @instname@ above)
//.  -self.parent.comb
//.  rv = self.declare(n)
//.  rv.my_slice = slice(start,stop,step) # propogate slice
//.  return rv
//. } # end def connect_inst
//. def __getitem__(self, idx):{
//.  if isinstance(idx, slice):{
//.   rv = self.copy()
//.   rv.my_slice = idx
//.   return rv
//.  }
//.  rv = self.xmods[idx].copy()
//.  rv.parent = None  ## let xmod be independent now for doing its own operations
//.  return rv
//. } # end def __getitem__
//. def __lshift__(self, other):{
//.  assert(isinstance(other, type(self.xmods[0])))
//.  self.n = self.parent.gen_var_name()
//.  start,stop,step = self.get_slice(len(self.xmods))
//.  idxs = []
//.  +self.parent.comb
//-----------------------------------------------------------------
// mapping @other.name@ to mods of @self.n@[@start@:@stop@:@step@]
//.  for i in range(start, stop, step):{
assign @self.n@.x@self.xmods[i].m@ = @other.map_to_mod(self.xmods[i].m)@;
//.   idxs.append(i)
//.  }
//.  -self.parent.comb
//.  self._call_nops(idxs)
//.  rv = self.declare(self.n)
//.  rv.my_slice = self.my_slice # propagate slice
//.  return rv
//. } # end def __lshift__
//. def __rshift__(self, other):{
//.  assert(isinstance(other, rnsv))
//.  base = other.base.copy()
//.  self.n = other.gen_var_name()
//.  start,stop,step = self.get_slice(len(self.xmods))
//.  +self.parent.comb
//-----------------------------------------------------------------
// mapping @self.name@ to @other.struct_name@ @self.n@
//.  print(f"mapping {self.name} to {other.struct_name} {self.n}")
//.  for i in range(start, stop, step):{
//.   m = self.xmods[i].m
//.   if m in base:{
assign @self.n@.x@m@ = @self.name@.x@m@;
//.    del base[base.index(m)]
//.   }
//.  } # end for i
//.  for m in base:{
// WARNING - mod @m@ was not assigned
//.  } # end for m
//.  -self.parent.comb
//.  var = self.create(self.n, other) ## point to new RNS base
//.  +var.parent.declarations
@var.parent.struct_name@ @var.name@;
//.  -var.parent.declarations
//.  return var
//. } # end def __rshift__
//.} # end class
