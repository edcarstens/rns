///fast.include("rnsv_encoder.sv.fast")
///fast.include("rnsv_decoder.sv.fast")
//.+fast

//.class rnsv_pipeline(Section):{
//. rex1 = re.compile(r"(\w+)_stage(\d+)\[(\d+):(\d+)\]")
//. rex2 = re.compile(r"(\w+)_stage(\d+)")
//. def stage_name(self, i, bits=True):{
//.  sbits = ""
//.  if bits and self.hibit is not None:{
//.   sbits = f"[{self.hibit}:{self.lobit}]"
//.  } # end if
//.  stage = ""
//.  if i:{
//.   stage = f"_stage{i}"
//.  }
//.  return f"{self.vname}{stage}{sbits}"
//. } # end def
//. def process(self):{
//.  if not self.vname:{
// rnsv_pipeline: ERROR - no variable name set (use pipeline call to set)
//.   return
//.  }
//.  rex3 = re.compile(r"\s*" + self.vname + r"_stage(\d+)")
//.  stages = []
//.  buf = ""
//.  for line in self.getLines():{
//.   if m:=re.match(rex3, line):{
//.    stages.append(int(m.group(1)))
//.    buf += line.lstrip() + fast.newline
//.   } # end if
//.  } # end for
//.  for i in range(1,self.last_stage+1):{
//.   if i not in stages:{
//.    src = self.stage_name(i-1)
//.    enc = ""
//.    if (self.encode and i>=2 and i<self.last_stage):{
//.     enc = "_enc"
//.    }
//.    buf += self.stage_name(i) + enc + " <= " + src + enc + ";" + fast.newline
//.   } # end if
//.  } # end for
//.  self.setText(buf)
//.  self >> ''
//.  self.setText('')
//. } # end def process
//. def __call__(self, x, rnsv_base=None, encode=True):{
//.  self.hibit = None
//.  self.encode = encode
//.  if isinstance(x, str):{
//.   self.encode = False
//.   if m:=re.match(self.rex1, x):{
//.    self.vname = m.group(1)
//.    self.last_stage = int(m.group(2))
//.    self.hibit = int(m.group(3))
//.    self.lobit = int(m.group(4))
//.    if rnsv_base is not None:{
//.     +rnsv_base.declarations
//.     for i in range(1,self.last_stage+1):{
logic [@self.hibit@:@self.lobit@] @self.stage_name(i,False)@;
//.     } # end for
//.     -rnsv_base.declarations
//.    } # end if
//.   } # end if
//.   elif m:=re.match(self.rex2, x):{
//.    self.vname = m.group(1)
//.    self.last_stage = int(m.group(2))
//.    if rnsv_base is not None:{
//.     +rnsv_base.declarations
//.     for i in range(1,self.last_stage+1):{
logic @self.stage_name(i)@;
//.     } # end for
//.     -rnsv_base.declarations
//.    } # end if
//.   } # end elif
//.   else:{
//.    self.vname = None
// rnsv_pipeline: ERROR - syntax error in variable name, @x@
//.   }
//.   return self
//.  } # end if
//.  assert(isinstance(x, rnsv_var))
//.  rns0 = x.parent
//.  self.rns0 = rns0
//.  xname = x.name
//.  if m:=re.match(self.rex1, xname):{
//.   self.vname = m.group(1)
//.   self.last_stage = int(m.group(2))
//.   self.hibit = int(m.group(3))
//.   self.lobit = int(m.group(4))
//.  }
//.  elif m:=re.match(self.rex2, xname):{
//.   self.vname = m.group(1)
//.   self.last_stage = int(m.group(2))
//.  } # end elif
//.  else:{
//.   self.vname = None
// rnsv_pipeline: ERROR - syntax error in variable name, @xname@
//.   return self
//.  }
//.  for i in range(1,self.last_stage+1):{
//.   if (self.encode and (self.last_stage > 2)):{
//.    +rns0.declarations
//.    if (i==2):{
//.     n1 = self.stage_name(1)
//.     n2 = self.stage_name(2)
@rns0@_enc @n1@_enc;
@rns0@_enc @n2@_enc;
//.     +rns0.instances
@rnsv_encoder(rns0)@ i_@rns0@_encoder(.y(@n1@_enc),.x(@n1@));
//.     -rns0.instances
//.    }
//.    elif (i==self.last_stage):{
//.     n = getattr(rns0, self.stage_name(i))
//.     n1 = self.stage_name(i-1)
@rns0@ @n1@;
//.     +rns0.instances
@rnsv_decoder(rns0)@ i_@rns0@_decoder(.y(@n1@),.x(@n1@_enc));
//.     -rns0.instances
//.    }
//.    elif (i==1):{
//.     getattr(rns0, self.stage_name(i))
//.    }
//.    else:{
@rns0@_enc @self.stage_name(i)@_enc;
//.    }
//.    -rns0.declarations
//.   } # end if
//.   else:{
//.   +rns0.declarations
//.   getattr(rns0, self.stage_name(i))
//.   -rns0.declarations
//.   }
//.  } # end for
//.  return self
//. } # end def __call__
//.} # end class

//.pipeline = rnsv_pipeline('pipeline')

//.-fast
